"""
This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at http://mozilla.org/MPL/2.0/.
"""

from __future__ import annotations

import datetime as dt
from contextlib import suppress
from dataclasses import dataclass
from typing import TYPE_CHECKING, Collection

import discord
from discord.app_commands import locale_str

from ..utils.other import utcnow
from .enums import Emojis


if TYPE_CHECKING:
    from ..core.context import Context


@dataclass
class Field:
    name: locale_str | str
    value: locale_str | str
    inline: bool = False


@dataclass
class Footer:
    text: locale_str | str
    iconUrl: str | None = None


class ZEmbedBuilder:
    def __init__(
        self,
        title: locale_str | str | None = None,
        description: locale_str | str | None = None,
        colour: discord.Colour | int = 0x3DB4FF,
        timestamp: dt.datetime | None = None,
        fields: list[Field] = [],
        fieldInline: bool = False,
    ):
        self.author: locale_str | str | None = None
        self.authorUrl: str | None = None
        self.authorIcon: str | None = None
        self.title: locale_str | str | None = title
        self.description: locale_str | str | None = description
        self.colour: discord.Colour | int = colour
        self.timestamp: dt.datetime | None = timestamp
        self.setFields(fields)
        self.fieldInline: bool = fieldInline
        self.imageUrl: str | None = None
        self.footer: Footer | None = None

    def setAuthor(self, *, name: locale_str | str, url: str | None = None, iconUrl: str | None = None) -> ZEmbedBuilder:
        self.author = name
        self.authorUrl = url
        self.authorIcon = iconUrl
        return self

    def setImage(self, url: str) -> ZEmbedBuilder:
        self.imageUrl = url
        return self

    def requesterToFooter(self, author: discord.User | discord.Member) -> ZEmbedBuilder:
        return self.setFooter(locale_str("requested-by", user=str(author)), author.display_avatar.url)

    def setFooter(self, text: locale_str | str, iconUrl: str | None = None) -> ZEmbedBuilder:
        self.footer = Footer(text, iconUrl)
        return self

    def setFields(self, fields: list[Field]) -> ZEmbedBuilder:
        self.fields = fields
        return self

    def addField(self, name: locale_str | str, value: locale_str | str, inline: bool = False) -> ZEmbedBuilder:
        field = Field(name, value, inline)

        try:  # avoid ZEmbedBuilder.fields from being singleton
            self.fields.append(field)
        except AttributeError:
            self.setFields([field])
        return self

    async def build(
        self, context: Context, *, cls=discord.Embed, autoGenerateDT: bool = False, addRequester: bool = True
    ) -> discord.Embed:
        kwargs = {}

        if self.title:
            kwargs["title"] = await context.maybeTranslate(self.title)

        if self.description:
            kwargs["description"] = await context.maybeTranslate(self.description)

        ts = self.timestamp
        if not ts and autoGenerateDT:
            ts = utcnow()
        if ts:
            kwargs["timestamp"] = ts

        if self.colour:
            kwargs["colour"] = self.colour

        instance: discord.Embed = cls(**kwargs)

        if self.author:
            instance.set_author(name=await context.maybeTranslate(self.author), icon_url=self.authorIcon, url=self.authorUrl)

        with suppress(AttributeError):
            for field in self.fields:
                name = await context.maybeTranslate(field.name)
                value = await context.maybeTranslate(field.value)
                instance.add_field(name=name, value=value, inline=field.inline or self.fieldInline)

        if self.imageUrl:
            instance.set_image(url=self.imageUrl)

        if not self.footer and addRequester:
            self.requesterToFooter(context.author)

        if self.footer:
            instance.set_footer(text=await context.maybeTranslate(self.footer.text), icon_url=self.footer.iconUrl)

        return instance


class ZEmbed(discord.Embed):
    def __init__(self, color=0x3DB4FF, fields: Collection[Field] = list(), fieldInline=False, **kwargs):
        super().__init__(color=color, **kwargs)
        for field in fields:
            self.add_field(name=field.name, value=field.value, inline=field.inline or fieldInline)

    @classmethod
    def minimal(cls, timestamp=None, **kwargs):
        instance = cls(timestamp=timestamp or utcnow(), **kwargs)
        return instance

    @classmethod
    def default(cls, context: discord.Interaction | Context, timestamp=None, **kwargs):
        """Shortcut to build embeds"""
        try:
            author = context.author  # type: ignore
        except AttributeError:
            author = context.user  # type: ignore

        instance = cls.minimal(timestamp=timestamp or utcnow(), **kwargs)
        instance.set_footer(
            text="Requested by {}".format(author),
            icon_url=author.display_avatar.url,
        )
        return instance

    @classmethod
    def error(
        cls,
        *,
        emoji: str = Emojis.error,
        title: str = "Error",
        color: discord.Color = None,
        **kwargs,
    ):
        return cls(
            title="{} {}".format(emoji, title),
            color=color or discord.Color.red(),
            **kwargs,
        )

    @classmethod
    def success(
        cls,
        *,
        emoji: str = Emojis.ok,
        title: str = "Success",
        color: discord.Color = None,
        **kwargs,
    ):
        return cls(
            title="{} {}".format(emoji, title),
            color=color or discord.Color.green(),
            **kwargs,
        )

    @classmethod
    def loading(
        cls,
        *,
        emoji: str = Emojis.loading,
        title: str = "Loading...",
        colour: discord.Colour | int = None,
        **kwargs,
    ):
        return cls(title="{} {}".format(emoji, title), color=colour, **kwargs)
